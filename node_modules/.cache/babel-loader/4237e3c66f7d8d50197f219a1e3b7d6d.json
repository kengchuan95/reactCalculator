{"ast":null,"code":"import _objectSpread from\"C:/Users/Nick/Documents/github/reactcalculator/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"C:/Users/Nick/Documents/github/reactcalculator/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";//this is a basic calculator making use of react.\n//inspiration and logical choices made following https://github.com/WebDevSimplified/react-calculator/blob/main/src/App.js\n//comments added by me, after building; the goal in this is to show understanding of what is going on, with a separate project to create a proper react.js app\nimport{useReducer}from'react';import DigitButton from\"./DigitButton\";import OperationButton from\"./OperationButton\";import'./App.css';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";export var ACTIONS={ADD_DIGIT:'add-digit',CLEAR:'clear',CHOOSE_OPERATION:'choose-operation',DELETE_DIGIT:'delete-digit',EVALUATE:'evaluate'};var INTEGER_FORMATTER=new Intl.NumberFormat(\"en-us\",{maximumFractionDigits:0});//the main compiler. the return is the output of the html\nfunction App(){var _useReducer=useReducer(reducer,{}),_useReducer2=_slicedToArray(_useReducer,2),_useReducer2$=_useReducer2[0],currentOperand=_useReducer2$.currentOperand,previousOperand=_useReducer2$.previousOperand,operation=_useReducer2$.operation,dispatch=_useReducer2[1];return/*#__PURE__*/_jsxs(\"div\",{className:\"calculator-grid\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"output\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"previous-operand\",children:[formatOperand(previousOperand),\" \",operation]}),/*#__PURE__*/_jsx(\"div\",{className:\"current-operand\",children:formatOperand(currentOperand)})]}),/*#__PURE__*/_jsx(\"button\",{className:\"span-two\",onClick:function onClick(){return dispatch({type:ACTIONS.CLEAR});},children:\"AC\"}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return dispatch({type:ACTIONS.DELETE_DIGIT});},children:\"DEL\"}),/*#__PURE__*/_jsx(OperationButton,{operation:\"\\xF7\",dispatch:dispatch}),/*#__PURE__*/_jsx(DigitButton,{digit:\"1\",dispatch:dispatch}),/*#__PURE__*/_jsx(DigitButton,{digit:\"2\",dispatch:dispatch}),/*#__PURE__*/_jsx(DigitButton,{digit:\"3\",dispatch:dispatch}),/*#__PURE__*/_jsx(OperationButton,{operation:\"*\",dispatch:dispatch}),/*#__PURE__*/_jsx(DigitButton,{digit:\"4\",dispatch:dispatch}),/*#__PURE__*/_jsx(DigitButton,{digit:\"5\",dispatch:dispatch}),/*#__PURE__*/_jsx(DigitButton,{digit:\"6\",dispatch:dispatch}),/*#__PURE__*/_jsx(OperationButton,{operation:\"+\",dispatch:dispatch}),/*#__PURE__*/_jsx(DigitButton,{digit:\"7\",dispatch:dispatch}),/*#__PURE__*/_jsx(DigitButton,{digit:\"8\",dispatch:dispatch}),/*#__PURE__*/_jsx(DigitButton,{digit:\"9\",dispatch:dispatch}),/*#__PURE__*/_jsx(OperationButton,{operation:\"-\",dispatch:dispatch}),/*#__PURE__*/_jsx(DigitButton,{digit:\".\",dispatch:dispatch}),/*#__PURE__*/_jsx(DigitButton,{digit:\"0\",dispatch:dispatch}),/*#__PURE__*/_jsx(\"button\",{className:\"span-two\",onClick:function onClick(){return dispatch({type:ACTIONS.EVALUATE});},children:\"=\"})]});}//this receives any button press. the main switch statement bases off of the type that is passed\nfunction reducer(state,_ref){var type=_ref.type,payload=_ref.payload;switch(type){case ACTIONS.DELETE_DIGIT://on delete, overwrite the last operand if it is populated, or the last character in our evaluation string if it exists\nif(state.overwrite){return _objectSpread(_objectSpread({},state),{},{overwrite:false,currentOperand:null});}if(state.currentOperand==null)return state;if(state.currentOperand.length===1){return _objectSpread(_objectSpread({},state),{},{currentOperand:null});}return _objectSpread(_objectSpread({},state),{},{currentOperand:state.currentOperand.slice(0,-1)});//on add, append the digit to our evaluation string. if we want to add a decimal, and a decimal already exists, don't add it. \ncase ACTIONS.ADD_DIGIT:if(state.overwrite){return _objectSpread(_objectSpread({},state),{},{currentOperand:payload.digit,overwrite:false});}if(payload.digit===\"0\"&&state.currentOperand===\"0\")return state;if(payload.digit===\".\"&&state.currentOperand.includes(\".\"))return state;return _objectSpread(_objectSpread({},state),{},{currentOperand:\"\".concat(state.currentOperand||\"\").concat(payload.digit)});// simply clear our evaluation string\ncase ACTIONS.CLEAR:return{};//apply an operation to our evaluatable strings.\ncase ACTIONS.CHOOSE_OPERATION://if nothing exists yet, do nothing; return the state we started with\nif(state.currentOperand==null&&state.previousOperand==null){return state;}// if we already applied an operation, which is stored in previousOperand, replace the operation. we can't apply two operations on top of eachother\nif(state.currentOperand==null){return _objectSpread(_objectSpread({},state),{},{operation:payload.operation});}//if there is no previous operand, set the current operand to the previous operand and set the operation, clearing the current operand\nif(state.previousOperand==null){return _objectSpread(_objectSpread({},state),{},{operation:payload.operation,previousOperand:state.currentOperand,currentOperand:null});}// we have a current operand, a previous operand, and an operation. evaluate it and set the overwrite so the next input takes priority\nreturn _objectSpread(_objectSpread({},state),{},{previousOperand:evaluate(state),currentOperand:null,operation:payload.operation});// on evaluation, if we are missing a relevant section of info, do nothing.\n//if we have everything, set the current main display with the evaluation function. \n//overwrite is set to true, so if you input new information after evaluating, the new information takes priority.\ncase ACTIONS.EVALUATE:if(state.operation==null||state.currentOperand==null||state.previousOperand==null){return state;}return _objectSpread(_objectSpread({},state),{},{overwrite:true,previousOperand:null,operation:null,currentOperand:evaluate(state)});// do nothing on default, we should always have a type assigned on dispatch\ndefault:return state;}}//function which evaluates all of our inputs when we have a full math problem\nfunction evaluate(_ref2){var currentOperand=_ref2.currentOperand,previousOperand=_ref2.previousOperand,operation=_ref2.operation;//format our information as numerals so we can do math\nvar prev=parseFloat(previousOperand);var current=parseFloat(currentOperand);if(isNaN(prev)||isNaN(current))return\"\";var computation=\"\";//switch statement moves between our available mathematical operations\nswitch(operation){case\"+\":computation=prev+current;break;case\"-\":computation=prev-current;break;case\"*\":computation=prev*current;break;case\"รท\":computation=prev/current;break;default:break;}//format our new output as a string so we can display again\nreturn computation.toString();}//simple function to format our inputs. splitting the integer and decimal, and then re-stitching them is so that a X.0 doesn't get reformatted to X immediately\nfunction formatOperand(operand){if(operand==null)return;var _operand$split=operand.split('.'),_operand$split2=_slicedToArray(_operand$split,2),integer=_operand$split2[0],decimal=_operand$split2[1];if(decimal==null)return INTEGER_FORMATTER.format(integer);return\"\".concat(INTEGER_FORMATTER.format(integer),\".\").concat(decimal);}export default App;","map":{"version":3,"names":["useReducer","DigitButton","OperationButton","ACTIONS","ADD_DIGIT","CLEAR","CHOOSE_OPERATION","DELETE_DIGIT","EVALUATE","INTEGER_FORMATTER","Intl","NumberFormat","maximumFractionDigits","App","reducer","currentOperand","previousOperand","operation","dispatch","formatOperand","type","state","payload","overwrite","length","slice","digit","includes","evaluate","prev","parseFloat","current","isNaN","computation","toString","operand","split","integer","decimal","format"],"sources":["C:/Users/Nick/Documents/github/reactcalculator/src/App.js"],"sourcesContent":["\n//this is a basic calculator making use of react.\n//inspiration and logical choices made following https://github.com/WebDevSimplified/react-calculator/blob/main/src/App.js\n//comments added by me, after building; the goal in this is to show understanding of what is going on, with a separate project to create a proper react.js app\nimport { useReducer } from 'react';\nimport DigitButton from \"./DigitButton\"\nimport OperationButton from \"./OperationButton\"\nimport './App.css';\nexport const ACTIONS = {\n  ADD_DIGIT: 'add-digit',\n  CLEAR: 'clear',\n  CHOOSE_OPERATION: 'choose-operation',\n  DELETE_DIGIT: 'delete-digit',\n  EVALUATE: 'evaluate'\n}\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\n  maximumFractionDigits: 0\n})\n//the main compiler. the return is the output of the html\nfunction App() {\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(reducer, {})\n  return (\n    <div className=\"calculator-grid\">\n      <div className=\"output\">\n        <div className=\"previous-operand\">{formatOperand(previousOperand)} {operation}</div>\n        <div className=\"current-operand\">{formatOperand(currentOperand)}</div>\n      </div>\n      <button className=\"span-two\" onClick={() => dispatch({type: ACTIONS.CLEAR})}>AC</button>\n      <button onClick={() => dispatch({ type: ACTIONS.DELETE_DIGIT})}>DEL</button>\n      <OperationButton operation=\"รท\" dispatch={dispatch} />\n      <DigitButton digit=\"1\" dispatch={dispatch} />\n      <DigitButton digit=\"2\" dispatch={dispatch} />\n      <DigitButton digit=\"3\" dispatch={dispatch} />\n      <OperationButton operation=\"*\" dispatch={dispatch} />\n      <DigitButton digit=\"4\" dispatch={dispatch} />\n      <DigitButton digit=\"5\" dispatch={dispatch} />\n      <DigitButton digit=\"6\" dispatch={dispatch} />\n      <OperationButton operation=\"+\" dispatch={dispatch} />\n      <DigitButton digit=\"7\" dispatch={dispatch} />\n      <DigitButton digit=\"8\" dispatch={dispatch} />\n      <DigitButton digit=\"9\" dispatch={dispatch} />\n      <OperationButton operation=\"-\" dispatch={dispatch} />\n      <DigitButton digit=\".\" dispatch={dispatch} />\n      <DigitButton digit=\"0\" dispatch={dispatch} />\n      <button className=\"span-two\" onClick={() => dispatch({ type: ACTIONS.EVALUATE })}>=</button>\n    </div>\n  );\n}\n//this receives any button press. the main switch statement bases off of the type that is passed\nfunction reducer(state, {type, payload }) {\n  switch(type) {\n    case ACTIONS.DELETE_DIGIT:\n      //on delete, overwrite the last operand if it is populated, or the last character in our evaluation string if it exists\n      if (state.overwrite) {\n        return {\n          ...state,\n          overwrite: false,\n          currentOperand: null,\n        };\n      }\n      if (state.currentOperand == null) return state;\n      if (state.currentOperand.length === 1) {\n        return {\n          ...state,\n          currentOperand: null,\n        };\n      }\n      return {\n        ...state, \n        currentOperand: state.currentOperand.slice(0, -1)\n      };\n    //on add, append the digit to our evaluation string. if we want to add a decimal, and a decimal already exists, don't add it. \n    case ACTIONS.ADD_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          currentOperand: payload.digit,\n          overwrite: false,\n        };\n      }\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") return state;\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\")) return state;\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`,\n      };\n    // simply clear our evaluation string\n    case ACTIONS.CLEAR:\n      return {};\n    //apply an operation to our evaluatable strings.\n    case ACTIONS.CHOOSE_OPERATION:\n      //if nothing exists yet, do nothing; return the state we started with\n      if (state.currentOperand == null && state.previousOperand == null) {\n        return state;\n      }\n      // if we already applied an operation, which is stored in previousOperand, replace the operation. we can't apply two operations on top of eachother\n      if (state.currentOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n        };\n      }\n      //if there is no previous operand, set the current operand to the previous operand and set the operation, clearing the current operand\n      if (state.previousOperand == null) {\n        return {\n          ...state, operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null,\n        };\n      }\n      // we have a current operand, a previous operand, and an operation. evaluate it and set the overwrite so the next input takes priority\n      return {\n        ...state,\n        previousOperand: evaluate(state),\n        currentOperand: null,\n        operation: payload.operation,\n      };\n    // on evaluation, if we are missing a relevant section of info, do nothing.\n    //if we have everything, set the current main display with the evaluation function. \n    //overwrite is set to true, so if you input new information after evaluating, the new information takes priority.\n    case ACTIONS.EVALUATE:\n      if (\n        state.operation == null ||\n        state.currentOperand == null ||\n        state.previousOperand == null\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        overwrite: true,\n        previousOperand: null,\n        operation: null,\n        currentOperand: evaluate(state),\n      };\n    // do nothing on default, we should always have a type assigned on dispatch\n    default:\n      return state;\n  }\n}\n//function which evaluates all of our inputs when we have a full math problem\nfunction evaluate({currentOperand, previousOperand, operation}) {\n  //format our information as numerals so we can do math\n  var prev = parseFloat(previousOperand); \n  var current = parseFloat(currentOperand);\n  if (isNaN(prev) || isNaN(current)) return \"\"\n  let computation = \"\";\n  //switch statement moves between our available mathematical operations\n  switch(operation) {\n    case \"+\":\n      computation = prev + current;\n      break;\n    case \"-\":\n      computation = prev - current;\n      break;\n    case \"*\":\n      computation = prev * current;\n      break;\n    case \"รท\":\n      computation = prev / current;\n      break;\n    default:\n      break;\n  }\n  //format our new output as a string so we can display again\n  return computation.toString();\n}\n//simple function to format our inputs. splitting the integer and decimal, and then re-stitching them is so that a X.0 doesn't get reformatted to X immediately\nfunction formatOperand(operand) {\n  if (operand == null) return;\n  const [integer, decimal] = operand.split('.');\n  if (decimal == null) return INTEGER_FORMATTER.format(integer);\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`;\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}