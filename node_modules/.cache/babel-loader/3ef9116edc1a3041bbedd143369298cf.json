{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nick\\\\Documents\\\\GitHub\\\\reactcalculator\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n//this is a basic calculator making use of react.\n//inspiration and logical choices made following https://github.com/WebDevSimplified/react-calculator/blob/main/src/App.js\n//comments added by me, after building; the goal in this is to show understanding of what is going on, with a separate project to create a proper react.js app\nimport { useReducer } from 'react';\nimport DigitButton from \"./DigitButton\";\nimport OperationButton from \"./OperationButton\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ACTIONS = {\n  ADD_DIGIT: 'add-digit',\n  CLEAR: 'clear',\n  CHOOSE_OPERATION: 'choose-operation',\n  DELETE_DIGIT: 'delete-digit',\n  EVALUATE: 'evaluate'\n};\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\n  maximumFractionDigits: 0\n});\n//the main compiler. the return is the output of the html\nfunction App() {\n  _s();\n  const [{\n    currentOperand,\n    previousOperand,\n    operation\n  }, dispatch] = useReducer(reducer, {});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calculator-grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"output\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"previous-operand\",\n        children: [formatOperand(previousOperand), \" \", operation]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-operand\",\n        children: formatOperand(currentOperand)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"span-two\",\n      onClick: () => dispatch({\n        type: ACTIONS.CLEAR\n      }),\n      children: \"AC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => dispatch({\n        type: ACTIONS.DELETE_DIGIT\n      }),\n      children: \"DEL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OperationButton, {\n      operation: \"\\xF7\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"1\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"2\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"3\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OperationButton, {\n      operation: \"*\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"4\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"5\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"6\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OperationButton, {\n      operation: \"+\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"7\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"8\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"9\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OperationButton, {\n      operation: \"-\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \".\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"0\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"span-two\",\n      onClick: () => dispatch({\n        type: ACTIONS.EVALUATE\n      }),\n      children: \"=\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n//this receives any button press. the main switch statement bases off of the type that is passed\n_s(App, \"U3IK2u6L5w8LChD4hEs3C1yVO5M=\");\n_c = App;\nfunction reducer(state, _ref) {\n  let {\n    type,\n    payload\n  } = _ref;\n  switch (type) {\n    case ACTIONS.DELETE_DIGIT:\n      //on delete, overwrite the last operand if it is populated, or the last character in our evaluation string if it exists\n      if (state.overwrite) {\n        return {\n          ...state,\n          overwrite: false,\n          currentOperand: null\n        };\n      }\n      if (state.currentOperand == null) return state;\n      if (state.currentOperand.length === 1) {\n        return {\n          ...state,\n          currentOperand: null\n        };\n      }\n      return {\n        ...state,\n        currentOperand: state.currentOperand.slice(0, -1)\n      };\n    //on add, append the digit to our evaluation string. if we want to add a decimal, and a decimal already exists, don't add it. \n    case ACTIONS.ADD_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          currentOperand: payload.digit,\n          overwrite: false\n        };\n      }\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") return state;\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\")) return state;\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`\n      };\n    // simply clear our evaluation string\n    case ACTIONS.CLEAR:\n      return {};\n    //apply an operation to our evaluatable strings.\n    case ACTIONS.CHOOSE_OPERATION:\n      //if nothing exists yet, do nothing; return the state we started with\n      if (state.currentOperand == null && state.previousOperand == null) {\n        return state;\n      }\n      // if we already applied an operation, which is stored in previousOperand, replace the operation. we can't apply two operations on top of eachother\n      if (state.currentOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation\n        };\n      }\n      //if there is no previous operand, set the current operand to the previous operand and set the operation, clearing the current operand\n      if (state.previousOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null\n        };\n      }\n      // we have a current operand, a previous operand, and an operation. evaluate it and set the overwrite so the next input takes priority\n      return {\n        ...state,\n        previousOperand: evaluate(state),\n        currentOperand: null,\n        operation: payload.operation\n      };\n    // on evaluation, if we are missing a relevant section of info, do nothing.\n    //if we have everything, set the current main display with the evaluation function. \n    //overwrite is set to true, so if you input new information after evaluating, the new information takes priority.\n    case ACTIONS.EVALUATE:\n      if (state.operation == null || state.currentOperand == null || state.previousOperand == null) {\n        return state;\n      }\n      return {\n        ...state,\n        overwrite: true,\n        previousOperand: null,\n        operation: null,\n        currentOperand: evaluate(state)\n      };\n    // do nothing on default, we should always have a type assigned on dispatch\n    default:\n      return state;\n  }\n}\n//function which evaluates all of our inputs when we have a full math problem\nfunction evaluate(_ref2) {\n  let {\n    currentOperand,\n    previousOperand,\n    operation\n  } = _ref2;\n  //format our information as numerals so we can do math\n  var prev = parseFloat(previousOperand);\n  var current = parseFloat(currentOperand);\n  if (isNaN(prev) || isNaN(current)) return \"\";\n  let computation = \"\";\n  //switch statement moves between our available mathematical operations\n  switch (operation) {\n    case \"+\":\n      computation = prev + current;\n      break;\n    case \"-\":\n      computation = prev - current;\n      break;\n    case \"*\":\n      computation = prev * current;\n      break;\n    case \"÷\":\n      computation = prev / current;\n      break;\n    default:\n      break;\n  }\n  //format our new output as a string so we can display again\n  return computation.toString();\n}\n//simple function to format our inputs. splitting the integer and decimal, and then re-stitching them is so that a X.0 doesn't get reformatted to X immediately\nfunction formatOperand(operand) {\n  if (operand == null) return;\n  const [integer, decimal] = operand.split('.');\n  if (decimal == null) return INTEGER_FORMATTER.format(integer);\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`;\n}\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useReducer","DigitButton","OperationButton","ACTIONS","ADD_DIGIT","CLEAR","CHOOSE_OPERATION","DELETE_DIGIT","EVALUATE","INTEGER_FORMATTER","Intl","NumberFormat","maximumFractionDigits","App","currentOperand","previousOperand","operation","dispatch","reducer","formatOperand","type","state","payload","overwrite","length","slice","digit","includes","evaluate","prev","parseFloat","current","isNaN","computation","toString","operand","integer","decimal","split","format"],"sources":["C:/Users/Nick/Documents/GitHub/reactcalculator/src/App.js"],"sourcesContent":["\n//this is a basic calculator making use of react.\n//inspiration and logical choices made following https://github.com/WebDevSimplified/react-calculator/blob/main/src/App.js\n//comments added by me, after building; the goal in this is to show understanding of what is going on, with a separate project to create a proper react.js app\nimport { useReducer } from 'react';\nimport DigitButton from \"./DigitButton\"\nimport OperationButton from \"./OperationButton\"\nimport './App.css';\nexport const ACTIONS = {\n  ADD_DIGIT: 'add-digit',\n  CLEAR: 'clear',\n  CHOOSE_OPERATION: 'choose-operation',\n  DELETE_DIGIT: 'delete-digit',\n  EVALUATE: 'evaluate'\n}\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\n  maximumFractionDigits: 0\n})\n//the main compiler. the return is the output of the html\nfunction App() {\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(reducer, {})\n  return (\n    <div className=\"calculator-grid\">\n      <div className=\"output\">\n        <div className=\"previous-operand\">{formatOperand(previousOperand)} {operation}</div>\n        <div className=\"current-operand\">{formatOperand(currentOperand)}</div>\n      </div>\n      <button className=\"span-two\" onClick={() => dispatch({type: ACTIONS.CLEAR})}>AC</button>\n      <button onClick={() => dispatch({ type: ACTIONS.DELETE_DIGIT})}>DEL</button>\n      <OperationButton operation=\"÷\" dispatch={dispatch} />\n      <DigitButton digit=\"1\" dispatch={dispatch} />\n      <DigitButton digit=\"2\" dispatch={dispatch} />\n      <DigitButton digit=\"3\" dispatch={dispatch} />\n      <OperationButton operation=\"*\" dispatch={dispatch} />\n      <DigitButton digit=\"4\" dispatch={dispatch} />\n      <DigitButton digit=\"5\" dispatch={dispatch} />\n      <DigitButton digit=\"6\" dispatch={dispatch} />\n      <OperationButton operation=\"+\" dispatch={dispatch} />\n      <DigitButton digit=\"7\" dispatch={dispatch} />\n      <DigitButton digit=\"8\" dispatch={dispatch} />\n      <DigitButton digit=\"9\" dispatch={dispatch} />\n      <OperationButton operation=\"-\" dispatch={dispatch} />\n      <DigitButton digit=\".\" dispatch={dispatch} />\n      <DigitButton digit=\"0\" dispatch={dispatch} />\n      <button className=\"span-two\" onClick={() => dispatch({ type: ACTIONS.EVALUATE })}>=</button>\n    </div>\n  );\n}\n//this receives any button press. the main switch statement bases off of the type that is passed\nfunction reducer(state, {type, payload }) {\n  switch(type) {\n    case ACTIONS.DELETE_DIGIT:\n      //on delete, overwrite the last operand if it is populated, or the last character in our evaluation string if it exists\n      if (state.overwrite) {\n        return {\n          ...state,\n          overwrite: false,\n          currentOperand: null,\n        };\n      }\n      if (state.currentOperand == null) return state;\n      if (state.currentOperand.length === 1) {\n        return {\n          ...state,\n          currentOperand: null,\n        };\n      }\n      return {\n        ...state, \n        currentOperand: state.currentOperand.slice(0, -1)\n      };\n    //on add, append the digit to our evaluation string. if we want to add a decimal, and a decimal already exists, don't add it. \n    case ACTIONS.ADD_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          currentOperand: payload.digit,\n          overwrite: false,\n        };\n      }\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") return state;\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\")) return state;\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`,\n      };\n    // simply clear our evaluation string\n    case ACTIONS.CLEAR:\n      return {};\n    //apply an operation to our evaluatable strings.\n    case ACTIONS.CHOOSE_OPERATION:\n      //if nothing exists yet, do nothing; return the state we started with\n      if (state.currentOperand == null && state.previousOperand == null) {\n        return state;\n      }\n      // if we already applied an operation, which is stored in previousOperand, replace the operation. we can't apply two operations on top of eachother\n      if (state.currentOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n        };\n      }\n      //if there is no previous operand, set the current operand to the previous operand and set the operation, clearing the current operand\n      if (state.previousOperand == null) {\n        return {\n          ...state, operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null,\n        };\n      }\n      // we have a current operand, a previous operand, and an operation. evaluate it and set the overwrite so the next input takes priority\n      return {\n        ...state,\n        previousOperand: evaluate(state),\n        currentOperand: null,\n        operation: payload.operation,\n      };\n    // on evaluation, if we are missing a relevant section of info, do nothing.\n    //if we have everything, set the current main display with the evaluation function. \n    //overwrite is set to true, so if you input new information after evaluating, the new information takes priority.\n    case ACTIONS.EVALUATE:\n      if (\n        state.operation == null ||\n        state.currentOperand == null ||\n        state.previousOperand == null\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        overwrite: true,\n        previousOperand: null,\n        operation: null,\n        currentOperand: evaluate(state),\n      };\n    // do nothing on default, we should always have a type assigned on dispatch\n    default:\n      return state;\n  }\n}\n//function which evaluates all of our inputs when we have a full math problem\nfunction evaluate({currentOperand, previousOperand, operation}) {\n  //format our information as numerals so we can do math\n  var prev = parseFloat(previousOperand); \n  var current = parseFloat(currentOperand);\n  if (isNaN(prev) || isNaN(current)) return \"\"\n  let computation = \"\";\n  //switch statement moves between our available mathematical operations\n  switch(operation) {\n    case \"+\":\n      computation = prev + current;\n      break;\n    case \"-\":\n      computation = prev - current;\n      break;\n    case \"*\":\n      computation = prev * current;\n      break;\n    case \"÷\":\n      computation = prev / current;\n      break;\n    default:\n      break;\n  }\n  //format our new output as a string so we can display again\n  return computation.toString();\n}\n//simple function to format our inputs. splitting the integer and decimal, and then re-stitching them is so that a X.0 doesn't get reformatted to X immediately\nfunction formatOperand(operand) {\n  if (operand == null) return;\n  const [integer, decimal] = operand.split('.');\n  if (decimal == null) return INTEGER_FORMATTER.format(integer);\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`;\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}