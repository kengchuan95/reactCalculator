{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nick\\\\OneDrive\\\\Documents\\\\github\\\\reactcalculator\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n//this is a basic calculator making use of react.\n//inspiration and logical choices made following https://github.com/WebDevSimplified/react-calculator/blob/main/src/App.js\n//comments added by me, after building; the goal in this is to show understanding of what is going on, with a separate project to create a proper react.js app\nimport { useReducer } from 'react';\nimport DigitButton from \"./DigitButton\";\nimport OperationButton from \"./OperationButton\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ACTIONS = {\n  ADD_DIGIT: 'add-digit',\n  CLEAR: 'clear',\n  CHOOSE_OPERATION: 'choose-operation',\n  DELETE_DIGIT: 'delete-digit',\n  EVALUATE: 'evaluate'\n};\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\n  maximumFractionDigits: 0\n});\n//the main compiler. the return is the output of the html\nfunction App() {\n  _s();\n  const [{\n    currentOperand,\n    previousOperand,\n    operation\n  }, dispatch] = useReducer(reducer, {});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calculator-grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"output\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"previous-operand\",\n        children: [formatOperand(previousOperand), \" \", operation]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-operand\",\n        children: formatOperand(currentOperand)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"span-two\",\n      onClick: () => dispatch({\n        type: ACTIONS.CLEAR\n      }),\n      children: \"AC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => dispatch({\n        type: ACTIONS.DELETE_DIGIT\n      }),\n      children: \"DEL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OperationButton, {\n      operation: \"\\xF7\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"1\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"2\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"3\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OperationButton, {\n      operation: \"*\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"4\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"5\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"6\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OperationButton, {\n      operation: \"+\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"7\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"8\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"9\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OperationButton, {\n      operation: \"-\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \".\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DigitButton, {\n      digit: \"0\",\n      dispatch: dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"span-two\",\n      onClick: () => dispatch({\n        type: ACTIONS.EVALUATE\n      }),\n      children: \"=\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n//this receives any button press. the main switch statement bases off of the type that is passed\n_s(App, \"U3IK2u6L5w8LChD4hEs3C1yVO5M=\");\n_c = App;\nfunction reducer(state, _ref) {\n  let {\n    type,\n    payload\n  } = _ref;\n  switch (type) {\n    case ACTIONS.DELETE_DIGIT:\n      //on delete, overwrite the last operand if it is populated, or the last character in our evaluation string if it exists\n      if (state.overwrite) {\n        return {\n          ...state,\n          overwrite: false,\n          currentOperand: null\n        };\n      }\n      if (state.currentOperand == null) return state;\n      if (state.currentOperand.length === 1) {\n        return {\n          ...state,\n          currentOperand: null\n        };\n      }\n      return {\n        ...state,\n        currentOperand: state.currentOperand.slice(0, -1)\n      };\n    //on add, append the digit to our evaluation string. if we want to add a decimal, and a decimal already exists, don't add it. \n    case ACTIONS.ADD_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          currentOperand: payload.digit,\n          overwrite: false\n        };\n      }\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") return state;\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\")) return state;\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`\n      };\n    // simply clear our evaluation string\n    case ACTIONS.CLEAR:\n      return {};\n    //apply an operation to our evaluatable strings.\n    case ACTIONS.CHOOSE_OPERATION:\n      //if nothing exists yet, do nothing; return the state we started with\n      if (state.currentOperand == null && state.previousOperand == null) {\n        return state;\n      }\n      // if we already applied an operation, which is stored in previousOperand, replace the operation. we can't apply two operations on top of eachother\n      if (state.currentOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation\n        };\n      }\n      //if there is no previous operand, set the current operand to the previous operand and set the operation, clearing the current operand\n      if (state.previousOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null\n        };\n      }\n      // we have a current operand, a previous operand, and an operation. evaluate it and set the overwrite so the next input takes priority\n      return {\n        ...state,\n        previousOperand: evaluate(state),\n        currentOperand: null,\n        operation: payload.operation\n      };\n    // on evaluation, if we are missing a relevant section of info, do nothing.\n    //if we have everything, set the current main display with the evaluation function. \n    //overwrite is set to true, so if you input new information after evaluating, the new information takes priority.\n    case ACTIONS.EVALUATE:\n      if (state.operation == null || state.currentOperand == null || state.previousOperand == null) {\n        return state;\n      }\n      return {\n        ...state,\n        overwrite: true,\n        previousOperand: null,\n        operation: null,\n        currentOperand: evaluate(state)\n      };\n    // do nothing on default, we should always have a type assigned on dispatch\n    default:\n      return state;\n  }\n}\n//function which evaluates all of our inputs when we have a full math problem\nfunction evaluate(_ref2) {\n  let {\n    currentOperand,\n    previousOperand,\n    operation\n  } = _ref2;\n  //format our information as numerals so we can do math\n  var prev = parseFloat(previousOperand);\n  var current = parseFloat(currentOperand);\n  if (isNaN(prev) || isNaN(current)) return \"\";\n  let computation = \"\";\n  //switch statement moves between our available mathematical operations\n  switch (operation) {\n    case \"+\":\n      computation = prev + current;\n      break;\n    case \"-\":\n      computation = prev - current;\n      break;\n    case \"*\":\n      computation = prev * current;\n      break;\n    case \"÷\":\n      computation = prev / current;\n      break;\n    default:\n      break;\n  }\n  //format our new output as a string so we can display again\n  return computation.toString();\n}\n//simple function to format our inputs. splitting the integer and decimal, and then re-stitching them is so that a X.0 doesn't get reformatted to X immediately\nfunction formatOperand(operand) {\n  if (operand == null) return;\n  const [integer, decimal] = operand.split('.');\n  if (decimal == null) return INTEGER_FORMATTER.format(integer);\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`;\n}\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useReducer","DigitButton","OperationButton","jsxDEV","_jsxDEV","ACTIONS","ADD_DIGIT","CLEAR","CHOOSE_OPERATION","DELETE_DIGIT","EVALUATE","INTEGER_FORMATTER","Intl","NumberFormat","maximumFractionDigits","App","_s","currentOperand","previousOperand","operation","dispatch","reducer","className","children","formatOperand","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","digit","_c","state","_ref","payload","overwrite","length","slice","includes","evaluate","_ref2","prev","parseFloat","current","isNaN","computation","toString","operand","integer","decimal","split","format","$RefreshReg$"],"sources":["C:/Users/Nick/OneDrive/Documents/github/reactcalculator/src/App.js"],"sourcesContent":["\r\n//this is a basic calculator making use of react.\r\n//inspiration and logical choices made following https://github.com/WebDevSimplified/react-calculator/blob/main/src/App.js\r\n//comments added by me, after building; the goal in this is to show understanding of what is going on, with a separate project to create a proper react.js app\r\nimport { useReducer } from 'react';\r\nimport DigitButton from \"./DigitButton\"\r\nimport OperationButton from \"./OperationButton\"\r\nimport './App.css';\r\nexport const ACTIONS = {\r\n  ADD_DIGIT: 'add-digit',\r\n  CLEAR: 'clear',\r\n  CHOOSE_OPERATION: 'choose-operation',\r\n  DELETE_DIGIT: 'delete-digit',\r\n  EVALUATE: 'evaluate'\r\n}\r\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\r\n  maximumFractionDigits: 0\r\n})\r\n//the main compiler. the return is the output of the html\r\nfunction App() {\r\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(reducer, {})\r\n  return (\r\n    <div className=\"calculator-grid\">\r\n      <div className=\"output\">\r\n        <div className=\"previous-operand\">{formatOperand(previousOperand)} {operation}</div>\r\n        <div className=\"current-operand\">{formatOperand(currentOperand)}</div>\r\n      </div>\r\n      <button className=\"span-two\" onClick={() => dispatch({type: ACTIONS.CLEAR})}>AC</button>\r\n      <button onClick={() => dispatch({ type: ACTIONS.DELETE_DIGIT})}>DEL</button>\r\n      <OperationButton operation=\"÷\" dispatch={dispatch} />\r\n      <DigitButton digit=\"1\" dispatch={dispatch} />\r\n      <DigitButton digit=\"2\" dispatch={dispatch} />\r\n      <DigitButton digit=\"3\" dispatch={dispatch} />\r\n      <OperationButton operation=\"*\" dispatch={dispatch} />\r\n      <DigitButton digit=\"4\" dispatch={dispatch} />\r\n      <DigitButton digit=\"5\" dispatch={dispatch} />\r\n      <DigitButton digit=\"6\" dispatch={dispatch} />\r\n      <OperationButton operation=\"+\" dispatch={dispatch} />\r\n      <DigitButton digit=\"7\" dispatch={dispatch} />\r\n      <DigitButton digit=\"8\" dispatch={dispatch} />\r\n      <DigitButton digit=\"9\" dispatch={dispatch} />\r\n      <OperationButton operation=\"-\" dispatch={dispatch} />\r\n      <DigitButton digit=\".\" dispatch={dispatch} />\r\n      <DigitButton digit=\"0\" dispatch={dispatch} />\r\n      <button className=\"span-two\" onClick={() => dispatch({ type: ACTIONS.EVALUATE })}>=</button>\r\n    </div>\r\n  );\r\n}\r\n//this receives any button press. the main switch statement bases off of the type that is passed\r\nfunction reducer(state, {type, payload }) {\r\n  switch(type) {\r\n    case ACTIONS.DELETE_DIGIT:\r\n      //on delete, overwrite the last operand if it is populated, or the last character in our evaluation string if it exists\r\n      if (state.overwrite) {\r\n        return {\r\n          ...state,\r\n          overwrite: false,\r\n          currentOperand: null,\r\n        };\r\n      }\r\n      if (state.currentOperand == null) return state;\r\n      if (state.currentOperand.length === 1) {\r\n        return {\r\n          ...state,\r\n          currentOperand: null,\r\n        };\r\n      }\r\n      return {\r\n        ...state, \r\n        currentOperand: state.currentOperand.slice(0, -1)\r\n      };\r\n    //on add, append the digit to our evaluation string. if we want to add a decimal, and a decimal already exists, don't add it. \r\n    case ACTIONS.ADD_DIGIT:\r\n      if (state.overwrite) {\r\n        return {\r\n          ...state,\r\n          currentOperand: payload.digit,\r\n          overwrite: false,\r\n        };\r\n      }\r\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") return state;\r\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\")) return state;\r\n      return {\r\n        ...state,\r\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`,\r\n      };\r\n    // simply clear our evaluation string\r\n    case ACTIONS.CLEAR:\r\n      return {};\r\n    //apply an operation to our evaluatable strings.\r\n    case ACTIONS.CHOOSE_OPERATION:\r\n      //if nothing exists yet, do nothing; return the state we started with\r\n      if (state.currentOperand == null && state.previousOperand == null) {\r\n        return state;\r\n      }\r\n      // if we already applied an operation, which is stored in previousOperand, replace the operation. we can't apply two operations on top of eachother\r\n      if (state.currentOperand == null) {\r\n        return {\r\n          ...state,\r\n          operation: payload.operation,\r\n        };\r\n      }\r\n      //if there is no previous operand, set the current operand to the previous operand and set the operation, clearing the current operand\r\n      if (state.previousOperand == null) {\r\n        return {\r\n          ...state, operation: payload.operation,\r\n          previousOperand: state.currentOperand,\r\n          currentOperand: null,\r\n        };\r\n      }\r\n      // we have a current operand, a previous operand, and an operation. evaluate it and set the overwrite so the next input takes priority\r\n      return {\r\n        ...state,\r\n        previousOperand: evaluate(state),\r\n        currentOperand: null,\r\n        operation: payload.operation,\r\n      };\r\n    // on evaluation, if we are missing a relevant section of info, do nothing.\r\n    //if we have everything, set the current main display with the evaluation function. \r\n    //overwrite is set to true, so if you input new information after evaluating, the new information takes priority.\r\n    case ACTIONS.EVALUATE:\r\n      if (\r\n        state.operation == null ||\r\n        state.currentOperand == null ||\r\n        state.previousOperand == null\r\n      ) {\r\n        return state;\r\n      }\r\n      return {\r\n        ...state,\r\n        overwrite: true,\r\n        previousOperand: null,\r\n        operation: null,\r\n        currentOperand: evaluate(state),\r\n      };\r\n    // do nothing on default, we should always have a type assigned on dispatch\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n//function which evaluates all of our inputs when we have a full math problem\r\nfunction evaluate({currentOperand, previousOperand, operation}) {\r\n  //format our information as numerals so we can do math\r\n  var prev = parseFloat(previousOperand); \r\n  var current = parseFloat(currentOperand);\r\n  if (isNaN(prev) || isNaN(current)) return \"\"\r\n  let computation = \"\";\r\n  //switch statement moves between our available mathematical operations\r\n  switch(operation) {\r\n    case \"+\":\r\n      computation = prev + current;\r\n      break;\r\n    case \"-\":\r\n      computation = prev - current;\r\n      break;\r\n    case \"*\":\r\n      computation = prev * current;\r\n      break;\r\n    case \"÷\":\r\n      computation = prev / current;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  //format our new output as a string so we can display again\r\n  return computation.toString();\r\n}\r\n//simple function to format our inputs. splitting the integer and decimal, and then re-stitching them is so that a X.0 doesn't get reformatted to X immediately\r\nfunction formatOperand(operand) {\r\n  if (operand == null) return;\r\n  const [integer, decimal] = operand.split('.');\r\n  if (decimal == null) return INTEGER_FORMATTER.format(integer);\r\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`;\r\n}\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}